[{"/Users/camcgreen/Documents/web-dev/chatbox/src/index.js":"1","/Users/camcgreen/Documents/web-dev/chatbox/src/reportWebVitals.js":"2","/Users/camcgreen/Documents/web-dev/chatbox/src/components/Home.js":"3","/Users/camcgreen/Documents/web-dev/chatbox/src/components/UserAuthentication.js":"4","/Users/camcgreen/Documents/web-dev/chatbox/src/components/Login.js":"5","/Users/camcgreen/Documents/web-dev/chatbox/src/components/Signup.js":"6","/Users/camcgreen/Documents/web-dev/chatbox/src/components/Dashboard.js":"7","/Users/camcgreen/Documents/web-dev/chatbox/src/components/Navbar.js":"8","/Users/camcgreen/Documents/web-dev/chatbox/src/components/ChatNavigation.js":"9","/Users/camcgreen/Documents/web-dev/chatbox/src/components/ChatMain.js":"10","/Users/camcgreen/Documents/web-dev/chatbox/src/components/Sidebar.js":"11","/Users/camcgreen/Documents/web-dev/chatbox/src/components/ChatInput.js":"12","/Users/camcgreen/Documents/web-dev/chatbox/src/components/NewChat.js":"13","/Users/camcgreen/Documents/web-dev/chatbox/src/utilities/helpers.js":"14"},{"size":1698,"mtime":1612005239015,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1612005239015,"results":"17","hashOfConfig":"16"},{"size":11238,"mtime":1613839723768,"results":"18","hashOfConfig":"16"},{"size":305,"mtime":1612005239008,"results":"19","hashOfConfig":"16"},{"size":2281,"mtime":1613839920069,"results":"20","hashOfConfig":"16"},{"size":12637,"mtime":1613839736490,"results":"21","hashOfConfig":"16"},{"size":10415,"mtime":1613839047242,"results":"22","hashOfConfig":"16"},{"size":7502,"mtime":1613839971119,"results":"23","hashOfConfig":"16"},{"size":14579,"mtime":1613838706668,"results":"24","hashOfConfig":"16"},{"size":13568,"mtime":1613838462500,"results":"25","hashOfConfig":"16"},{"size":18940,"mtime":1613840242059,"results":"26","hashOfConfig":"16"},{"size":8216,"mtime":1613837451088,"results":"27","hashOfConfig":"16"},{"size":4026,"mtime":1613840065975,"results":"28","hashOfConfig":"16"},{"size":505,"mtime":1613839672583,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},"afae6t",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"33"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"33"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"/Users/camcgreen/Documents/web-dev/chatbox/src/index.js",["62","63","64"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import \"./index.css\";\nimport \"./main.scss\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Route, BrowserRouter, Switch } from \"react-router-dom\";\nimport UserAuthentication from \"./components/UserAuthentication\";\nimport Home from \"./components/Home\";\nimport Login from \"./components/Login\";\nimport Signup from \"./components/Signup\";\nimport Dashboard from \"./components/Dashboard\";\n\nconst firebase = require(\"firebase\");\nrequire(\"firebase/firestore\");\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyBLPfFC6AT9gHnm4rLP4qJPefL2IP2t3Wk\",\n  authDomain: \"chatbox-7b75a.firebaseapp.com\",\n  projectId: \"chatbox-7b75a\",\n  storageBucket: \"chatbox-7b75a.appspot.com\",\n  messagingSenderId: \"1068497569992\",\n  appId: \"1:1068497569992:web:cd34fe942f7f080087bdfd\",\n});\n\nlet initialLoaded = false;\n\nconst routing = (\n  <BrowserRouter>\n    <div id=\"routing-container\">\n      {/* <Switch> */}\n      <div className=\"user-authentication-container\">\n        <Route exact path=\"/\" component={Home}></Route>\n        <Route path=\"/login\" component={Login}></Route>\n        <Route path=\"/signup\" component={Signup}></Route>\n      </div>\n      <div className=\"dashboard-container\">\n        <Route path=\"/dashboard\" component={Dashboard}></Route>\n      </div>\n      {/* </Switch> */}\n    </div>\n  </BrowserRouter>\n);\n\nReactDOM.render(\n  <React.StrictMode>{routing}</React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["65","66"],"/Users/camcgreen/Documents/web-dev/chatbox/src/reportWebVitals.js",[],"/Users/camcgreen/Documents/web-dev/chatbox/src/components/Home.js",[],"/Users/camcgreen/Documents/web-dev/chatbox/src/components/UserAuthentication.js",["67"],"import React from \"react\";\n// import { disableRightMiddleClick } from \"../utilities/helper\";\n// import \"./main.scss\";\nconst firebase = require(\"firebase\");\n\nclass UserAuthentication extends React.Component {\n  render() {\n    return <div>UserAuthentication</div>;\n  }\n}\n\nexport default UserAuthentication;\n","/Users/camcgreen/Documents/web-dev/chatbox/src/components/Login.js",[],"/Users/camcgreen/Documents/web-dev/chatbox/src/components/Signup.js",["68"],"import React from \"react\";\nimport Navbar from \"./Navbar\";\nimport { Link } from \"react-router-dom\";\nimport { disableRightMiddleClick } from \"../utilities/helpers\";\nimport \"../main.scss\";\nconst firebase = require(\"firebase\");\n\nclass Signup extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: null,\n      password: null,\n      passwordConfirmation: null,\n      // nickname: null,\n      nameFirst: null,\n      nameLast: null,\n      signupError: \"\",\n    };\n  }\n  render() {\n    return (\n      <>\n        <Navbar />\n        <div className=\"authentication\">\n          <h1 className=\"authentication__h1\">Sign up</h1>\n          <form\n            className=\"authentication__form\"\n            onSubmit={(e) => this.submitSignup(e)}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"email\"\n              autoFocus\n              onChange={(e) => this.handleUserInput(\"email\", e)}\n            />\n            <input\n              type=\"password\"\n              placeholder=\"password\"\n              onChange={(e) => this.handleUserInput(\"password\", e)}\n            />\n            <input\n              type=\"password\"\n              placeholder=\"confirm password\"\n              onChange={(e) => this.handleUserInput(\"passwordConfirmation\", e)}\n            />\n            <input\n              type=\"text\"\n              placeholder=\"first name\"\n              onChange={(e) => this.handleUserInput(\"nameFirst\", e)}\n            />\n            <input\n              type=\"text\"\n              placeholder=\"last name\"\n              onChange={(e) => this.handleUserInput(\"nameLast\", e)}\n            />\n            <h4 className=\"error-text\">\n              {this.state.signupError ? this.state.signupError : null}\n            </h4>\n            <button className=\"authentication__form__submit btn btn--submit\">\n              Sign up\n            </button>\n          </form>\n          <h5 className=\"account\">\n            Already have an account?{\" \"}\n            <Link\n              to=\"/login\"\n              className=\"account__link\"\n              // style={{ textDecoration: \"none\", color: \"#6937FF\" }}\n            >\n              Login\n            </Link>\n          </h5>\n        </div>\n      </>\n    );\n  }\n  componentDidMount = () => {\n    disableRightMiddleClick();\n  };\n  checkNameValid = (name) => {\n    const regex = /^[a-zA-Z]+$/;\n    return regex.test(name);\n  };\n  formIsValid = () =>\n    this.state.password === this.state.passwordConfirmation &&\n    this.state.email !== null &&\n    this.state.password !== null &&\n    this.state.passwordConfirmation !== null &&\n    this.state.nameFirst !== null &&\n    this.state.nameSecond !== null &&\n    this.checkNameValid(this.state.nameFirst) &&\n    this.checkNameValid(this.state.nameLast);\n  handleUserInput = (type, e) => {\n    switch (type) {\n      case \"email\":\n        this.setState({ email: e.target.value });\n        break;\n      case \"password\":\n        this.setState({ password: e.target.value });\n        break;\n      case \"passwordConfirmation\":\n        this.setState({ passwordConfirmation: e.target.value });\n        break;\n      case \"nameFirst\":\n        this.setState({ nameFirst: e.target.value });\n        break;\n      case \"nameLast\":\n        this.setState({ nameLast: e.target.value });\n        break;\n      default:\n        break;\n    }\n  };\n  submitSignup = (e) => {\n    e.preventDefault();\n    if (!this.formIsValid()) {\n      switch (true) {\n        case this.state.email === null:\n          this.setState({ signupError: \"You must enter an email address\" });\n          return;\n        case this.state.password === null:\n          this.setState({ signupError: \"You must enter a password\" });\n          return;\n        case this.state.password !== this.state.passwordConfirmation:\n          this.setState({ signupError: \"Passwords do not match\" });\n          return;\n        case this.state.nameFirst === null:\n          this.setState({ signupError: \"You must enter a first name\" });\n          return;\n        case this.state.nameLast === null:\n          this.setState({ signupError: \"You must enter a last name\" });\n          return;\n        case !this.checkNameValid(this.state.nickname):\n          this.setState({ signupError: \"Nickname must only include letters.\" });\n          return;\n      }\n      return;\n    }\n    firebase\n      .auth()\n      .createUserWithEmailAndPassword(\n        this.state.email.toLowerCase(),\n        this.state.password\n      )\n      .then(\n        (authRes) => {\n          const userObj = {\n            email: authRes.user.email,\n            // firstName: this.state.firstName,\n            // lastName: this.state.lastName,\n            // nickname: this.state.nickname,\n            nameFirst: this.state.nameFirst,\n            nameLast: this.state.nameLast,\n            lastLoggedOut: null,\n            online: false,\n            profilePictureUrl: \"https://i.imgur.com/ZtGfcXy.png\",\n          };\n          firebase\n            .firestore()\n            .collection(\"users\")\n            .doc(this.state.email.toLowerCase())\n            .set(userObj)\n            .then(\n              () => {\n                const camEmail = \"c.c.green@outlook.com\";\n                const chatCamUsers = [camEmail, this.state.email].sort();\n                const chatCamDocKey = chatCamUsers.join(\":\");\n                console.log(`chatCamDocKey = ${chatCamDocKey}`);\n                const chatCamObj = {\n                  messages: [\n                    {\n                      gifRef: null,\n                      message: \"Hey there! 👋\",\n\n                      sender: camEmail,\n                      timestamp: Date.now() - 60000 * 7,\n                    },\n                    {\n                      gifRef: null,\n                      message:\n                        \"Welcome to Chatbox, a real-time chat application built with React and Firebase\",\n\n                      sender: camEmail,\n                      timestamp: Date.now() - 60000 * 6,\n                    },\n                    {\n                      gifRef:\n                        \"https://media4.giphy.com/media/p6P5KdqRljCrVoZj79/giphy.gif?cid=054422c3eurumthxw6z3v80yrujtkke22l1c4uwyzgeqd7f3&rid=giphy.gif\",\n                      message: null,\n\n                      sender: camEmail,\n                      timestamp: Date.now() - 60000 * 5,\n                    },\n                    {\n                      gifRef: null,\n                      message: \"I'm Cam Green, the creator of this app\",\n\n                      sender: camEmail,\n                      timestamp: Date.now() - 60000 * 4,\n                    },\n                    {\n                      gifRef: null,\n                      message:\n                        \"I have included some dummy chats to show you the functionality of the app as it turns out it’s quite hard to demo a chat application without lots of users!\",\n\n                      sender: camEmail,\n                      timestamp: Date.now() - 60000 * 3,\n                    },\n                    {\n                      gifRef: null,\n                      message:\n                        \"Click on one these chats in the chat list to the side or send a nice message to a friend using their email address with the + button (the friend must also have signed up on Chatbox)\",\n\n                      sender: camEmail,\n                      timestamp: Date.now() - 60000 * 2,\n                    },\n                    {\n                      gifRef: null,\n                      message:\n                        \"Feel free to contact me right here, or on my email address mailto:hello@camgreen.works, and I will get back to you as soon as I can! 😀\",\n\n                      sender: camEmail,\n                      timestamp: Date.now(),\n                    },\n                  ],\n                  receiverHasRead: false,\n                  user1Typing: false,\n                  user2Typing: false,\n                  users: chatCamUsers,\n                };\n                console.log(\"setting up chat with Cam\", chatCamObj);\n                firebase\n                  .firestore()\n                  .collection(\"chats\")\n                  .doc(chatCamDocKey)\n                  .set({ ...chatCamObj })\n                  .then(() => {\n                    const janeEmail = \"jane.doe@gmail.com\";\n                    const chatJaneUsers = [janeEmail, this.state.email].sort();\n                    const chatJaneDocKey = chatJaneUsers.join(\":\");\n                    const chatJaneObj = {\n                      messages: [\n                        {\n                          gifRef: null,\n                          message:\n                            \"I'm here to tell you that you can send emojis with the emoji button, like this:\",\n\n                          sender: janeEmail,\n                          timestamp: Date.now() - 60000 * 23,\n                        },\n                        {\n                          gifRef: null,\n                          message: \"😁😁😁\",\n\n                          sender: janeEmail,\n                          timestamp: Date.now() - 60000 * 22,\n                        },\n                        {\n                          gifRef: null,\n                          message:\n                            \"You can send GIFs with the GIF icon button, using the Giphy API\",\n\n                          sender: janeEmail,\n                          timestamp: Date.now() - 60000 * 21,\n                        },\n                        {\n                          gifRef:\n                            \"https://media0.giphy.com/media/8Iv5lqKwKsZ2g/giphy.gif?cid=054422c3esjdb7maxup41cz0uudxss9dcpn41a9h97r4b5vu&rid=giphy.gif\",\n                          message: null,\n\n                          sender: janeEmail,\n                          timestamp: Date.now() - 60000 * 20,\n                        },\n                      ],\n                      receiverHasRead: false,\n                      user1Typing: false,\n                      user2Typing: false,\n                      users: chatJaneUsers,\n                    };\n                    firebase\n                      .firestore()\n                      .collection(\"chats\")\n                      .doc(chatJaneDocKey)\n                      .set({ ...chatJaneObj })\n                      .then(() => {\n                        const johnEmail = \"john.bellamy@gmail.com\";\n                        const chatJohnUsers = [\n                          johnEmail,\n                          this.state.email,\n                        ].sort();\n                        const chatJohnDocKey = chatJohnUsers.join(\":\");\n                        const chatJohnObj = {\n                          messages: [\n                            {\n                              gifRef: null,\n                              message:\n                                \"To show you the *other user is typing* feature, my isTyping flag has been set to true for the rest of eternity\",\n\n                              sender: johnEmail,\n                              timestamp: Date.now() - 60000 * 27,\n                            },\n                            {\n                              gifRef: null,\n                              message: \"Tiring!\",\n\n                              sender: johnEmail,\n                              timestamp: Date.now() - 60000 * 26,\n                            },\n                            {\n                              gifRef: null,\n                              message: \"Below is the typing indicator 👇\",\n\n                              sender: johnEmail,\n                              timestamp: Date.now() - 60000 * 25,\n                            },\n                          ],\n                          receiverHasRead: false,\n                          user1Typing: true,\n                          user2Typing: true,\n                          users: chatJohnUsers,\n                        };\n                        firebase\n                          .firestore()\n                          .collection(\"chats\")\n                          .doc(chatJohnDocKey)\n                          .set({ ...chatJohnObj })\n                          .then(() => {\n                            this.props.history.push(\"/dashboard\");\n                          });\n                      });\n                  });\n              },\n              (dbError) => {\n                this.setState({ signupError: \"Failed to add user\" });\n              }\n            );\n        },\n        (authError) => {\n          this.setState({ signupError: authError.message });\n        }\n      );\n  };\n}\n\nexport default Signup;\n","/Users/camcgreen/Documents/web-dev/chatbox/src/components/Dashboard.js",[],"/Users/camcgreen/Documents/web-dev/chatbox/src/components/Navbar.js",["69"],"/Users/camcgreen/Documents/web-dev/chatbox/src/components/ChatNavigation.js",[],"/Users/camcgreen/Documents/web-dev/chatbox/src/components/ChatMain.js",[],"/Users/camcgreen/Documents/web-dev/chatbox/src/components/Sidebar.js",["70","71"],"/Users/camcgreen/Documents/web-dev/chatbox/src/components/ChatInput.js",[],"/Users/camcgreen/Documents/web-dev/chatbox/src/components/NewChat.js",["72"],"/Users/camcgreen/Documents/web-dev/chatbox/src/utilities/helpers.js",[],{"ruleId":"73","severity":1,"message":"74","line":6,"column":32,"nodeType":"75","messageId":"76","endLine":6,"endColumn":38},{"ruleId":"73","severity":1,"message":"77","line":7,"column":8,"nodeType":"75","messageId":"76","endLine":7,"endColumn":26},{"ruleId":"73","severity":1,"message":"78","line":25,"column":5,"nodeType":"75","messageId":"76","endLine":25,"endColumn":18},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"73","severity":1,"message":"83","line":4,"column":7,"nodeType":"75","messageId":"76","endLine":4,"endColumn":15},{"ruleId":"84","severity":1,"message":"85","line":118,"column":7,"nodeType":"86","messageId":"87","endLine":137,"endColumn":8},{"ruleId":"73","severity":1,"message":"83","line":6,"column":7,"nodeType":"75","messageId":"76","endLine":6,"endColumn":15},{"ruleId":"73","severity":1,"message":"83","line":5,"column":7,"nodeType":"75","messageId":"76","endLine":5,"endColumn":15},{"ruleId":"88","severity":1,"message":"89","line":165,"column":11,"nodeType":"90","endLine":169,"endColumn":13},{"ruleId":"84","severity":1,"message":"85","line":67,"column":5,"nodeType":"86","messageId":"87","endLine":74,"endColumn":6},"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'UserAuthentication' is defined but never used.","'initialLoaded' is assigned a value but never used.","no-native-reassign",["91"],"no-negated-in-lhs",["92"],"'firebase' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]